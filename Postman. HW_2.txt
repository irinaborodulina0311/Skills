first 

pm.test("Status code is 200" , function () {
    pm.response.to.have.status(200);
});

pm.test("Status code is 200", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!");
});




user_info_2



pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

let jsonData = pm.response.json()

let req = request.data

pm.test("json response имеет параметр start_qa_salary", () => {
    pm.expect(jsonData).to.have.property("start_qa_salary")
});

pm.test("json response имеет параметр qa_salary_after_6_months", () => {
	pm.expect(jsonData).to.have.property("qa_salary_after_6_months")
});

pm.test("json response имеет параметр qa_salary_after_12_months", () => {
	pm.expect(jsonData).to.have.property("qa_salary_after_12_months")
});

pm.test("json response имеет параметр qa_salary_after_1.5_year", () => {
	pm.expect(jsonData).to.have.property("qa_salary_after_1.5_year")
});

pm.test("json response имеет параметр qa_salary_after_3.5_years", () => {
	pm.expect(jsonData).to.have.property("qa_salary_after_3.5_years")
});

pm.test("json response имеет параметр person", () => {
	pm.expect(jsonData).to.have.property("person")
});

pm.test("параметр start_qa_salary равен salary из request", () => {
	pm.expect(jsonData.start_qa_salary).to.eql(+req.salary)
});

pm.test("параметр qa_salary_after_6_months равен salary*2 из request", () => {
	pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary*2)
});

pm.test("параметр qa_salary_after_12_months равен salary*2.7 из request", () => {
	pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary*2.7)
});

pm.test("параметр qa_salary_after_1.5_year равен salary*3.3 из request", () => {
	pm.expect(jsonData["qa_salary_after_1.5_year"]).to.eql(req.salary*3.3)
});

pm.test("параметр qa_salary_after_3.5_years равен salary*3.8 из request", () => {
	pm.expect(jsonData["qa_salary_after_3.5_years"]).to.eql(req.salary*3.8)
});

pm.test("в параметре person, 1-й элемент из u_name равен salary из request", function(){
    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);
});
console.log("name[1] =   ", jsonData.person.u_name[1])

pm.test("параметр u_age равен age из request", function(){
    pm.expect(jsonData.person.u_age).to.eql(+req.age);
});
console.log("age =   ", jsonData.person.u_age)

pm.test("параметр u_salary_5_years равен salary*4.2 из request", function(){
    pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary*4.2);
});

for (let i in jsonData.person) {
    console.log("property:", i, "property value:", jsonData.person[i]);
}




user_info_3


pm.test("user_info_3 is 200" , function () {
    pm.response.to.have.status(200);
});

let jsonData = pm.response.json();

pm.test("Name", function () {
    pm.expect(jsonData.name).to.eql("Irvasborodulina");
});

pm.test("Age", function () {
    pm.expect(jsonData.age).to.eql("38");
});

pm.test("Salary", function () {
    pm.expect(jsonData.salary).to.eql(1500);
});

console.log(jsonData.family);

pm.expect(jsonData.family.u_salary_1_5_year).to.eql(jsonData.salary*4);
console.log(jsonData.family.u_salary_1_5_year);
console.log(jsonData.salary*4);




object_info_3


pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

let jsonData = pm.response.json();

let req = pm.request.url.query.toObject();

pm.test("Name is url", function() {
    pm.expect(jsonData.name).to.eql(req.name);
});

pm.test("Age is url", function() {
    pm.expect(jsonData.age).to.eql(req.age);
});

pm.test("Salary is url", function() {
    pm.expect(jsonData.salary).to.eql(+req.salary);
});

console.log(jsonData.family);

pm.test("Проверить, что у параметра dog есть параметры name", () => {
    pm.expect(jsonData.family.pets.dog).to.have.property("name")
});

pm.test("Проверить, что у параметра dog есть параметры age", () => {
    pm.expect(jsonData.family.pets.dog).to.have.property("age")
});

pm.test("Проверить, что у параметра name есть значение Luky", () => {
    pm.expect(jsonData.family.pets.dog.name).to.be.oneOf(["Luky"])
});

pm.test("Проверить, что параметр age имеет значение 4", () => {
    pm.expect(jsonData.family.pets.dog.age).to.be.oneOf([4])
});




object_info_4


pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

let jsonData = pm.response.json();

let req = pm.request.url.query.toObject();

pm.test("Name is url", function () {
    pm.expect(jsonData.name).to.eql(req.name);
});

pm.test("Age is url", function () {
    pm.expect(jsonData.age).to.eql(+req.age);
});

console.log(req.salary)

console.log(jsonData.salary)

let salary_1 = jsonData.salary[0]
console.log(salary_1)

let salary_2 = jsonData.salary[1]
console.log(salary_2)

let salary_3 = jsonData.salary[2]
console.log(salary_3)

pm.test("Salary-0", function () {
    pm.expect(salary_1).to.eql(+req.salary);
});

pm.test("Salary-1", function () {
    pm.expect(+salary_2).to.eql(req.salary*2);
});

pm.test("Salary-2", function () {
    pm.expect(+salary_3).to.eql(req.salary*3);
});

pm.environment.set("name", jsonData.name);

pm.environment.set("age", jsonData.age);

pm.environment.set("salary", jsonData.salary[1]);

for (i = 0; i < jsonData.salary.length; i++) {
    console.log("salary_cycle", jsonData.salary[i]);
}